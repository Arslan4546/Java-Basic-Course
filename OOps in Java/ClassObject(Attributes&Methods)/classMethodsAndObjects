//Methods must have return type 
//we cannot call non-static method in static static method
//you can call non-static method in staic method by creating object of that calss and access by class name and . 
//ex: A.sumofTwo() in this example A is the class name and other is method name
//static method can only access the static variable defined in the class 
//but non-static method can access both static and non-static variables defined in the class



//Inside main, call myMethod():

public class Main {
  static void myMethod() {
    System.out.println("Hello World!");
  }

  public static void main(String[] args) {
    myMethod();
  }
}


//An example to demonstrate the differences between static and public methods:
//static method  can be called directly while public method can call by creating objects

public class Main {
    // Static method
    static void myStaticMethod() {
      System.out.println("Static methods can be called without creating objects");
    }
  
    // Public method
    public void myPublicMethod() {
      System.out.println("Public methods must be called by creating objects");
    }
  
    // Main method
    public static void main(String[] args) {
      myStaticMethod(); // Call the static method
      // myPublicMethod(); This would compile an error
  
      Main myObj = new Main(); // Create an object of Main
      myObj.myPublicMethod(); // Call the public method on the object
    }
  }


   //acessing two methods with the same object 

   // Create a Main class
public class Main {
 
    // Create a fullThrottle() method
    public void fullThrottle() {
      System.out.println("The car is going as fast as it can!");
    }
  
    // Create a speed() method and add a parameter
    public void speed(int maxSpeed) {
      System.out.println("Max speed is: " + maxSpeed);
    }
  
    // Inside main, call the methods on the myCar object
    public static void main(String[] args) {
      Main myCar = new Main();   // Create a myCar object
      myCar.fullThrottle();      // Call the fullThrottle() method
      myCar.speed(200);          // Call the speed() method
    }
  }
  

  
  
//

//   Using Multiple Classes
// Like we specified in the Classes chapter, it is a good practice to create an object of a class and access it in another class.

// Remember that the name of the java file should match the class name. In this example, we have created two files in the same directory:

// Main.java
// Second.java


//in this example its mean you can creat two java files and and write program in both but the class name must be same as the file name so that you can access both methods with the same object in another class in main function



  
  